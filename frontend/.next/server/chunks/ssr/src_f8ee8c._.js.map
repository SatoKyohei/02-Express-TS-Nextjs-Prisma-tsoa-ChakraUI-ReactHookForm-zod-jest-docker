{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/satoukyouhei/Documents/it/tutorial/express_nextjs_tsoa_prisma/frontend/src/components/template/fieldInput/FieldInput.hooks.ts"],"sourcesContent":["import { Control, FieldValues, Path, useController } from \"react-hook-form\";\n\nexport type UseFieldInputProps<T extends FieldValues> = {\n  control: Control<T>;\n  name: Path<T>;\n};\n\nexport const useFieldInput = <T extends FieldValues>({\n  name,\n  control,\n}: UseFieldInputProps<T>) => {\n  const {\n    field: { value, onChange, onBlur },\n    fieldState: { invalid },\n    formState: { errors },\n  } = useController({ name, control });\n\n  return { value, invalid, errors, onChange, onBlur };\n};\n"],"names":[],"mappings":";;;AAAA;;AAOO,MAAM,gBAAgB,CAAwB,EACnD,IAAI,EACJ,OAAO,EACe;IACtB,MAAM,EACJ,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,EAClC,YAAY,EAAE,OAAO,EAAE,EACvB,WAAW,EAAE,MAAM,EAAE,EACtB,GAAG,CAAA,GAAA,8JAAA,CAAA,gBAAa,AAAD,EAAE;QAAE;QAAM;IAAQ;IAElC,OAAO;QAAE;QAAO;QAAS;QAAQ;QAAU;IAAO;AACpD"}},
    {"offset": {"line": 25, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["file:///Users/satoukyouhei/Documents/it/tutorial/express_nextjs_tsoa_prisma/frontend/src/components/ui/field.tsx"],"sourcesContent":["import { Field as ChakraField } from \"@chakra-ui/react\";\nimport * as React from \"react\";\n\nexport interface FieldProps extends Omit<ChakraField.RootProps, \"label\"> {\n  label?: React.ReactNode\n  helperText?: React.ReactNode\n  errorText?: React.ReactNode\n  optionalText?: React.ReactNode\n}\n\nexport const Field = React.forwardRef<HTMLDivElement, FieldProps>(\n  function Field(props, ref) {\n    const { label, children, helperText, errorText, optionalText, ...rest } =\n      props;\n    return (\n      <ChakraField.Root ref={ref} {...rest}>\n        {label && (\n          <ChakraField.Label>\n            {label}\n            <ChakraField.RequiredIndicator fallback={optionalText} />\n          </ChakraField.Label>\n        )}\n        {children}\n        {helperText && (\n          <ChakraField.HelperText>{helperText}</ChakraField.HelperText>\n        )}\n        {errorText && (\n          <ChakraField.ErrorText>{errorText}</ChakraField.ErrorText>\n        )}\n      </ChakraField.Root>\n    );\n  },\n);\n"],"names":[],"mappings":";;;;AACA;AADA;;;;AAUO,MAAM,sBAAQ,sMAAM,UAAU,CACnC,SAAS,MAAM,KAAK,EAAE,GAAG;IACvB,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,UAAU,EAAE,SAAS,EAAE,YAAY,EAAE,GAAG,MAAM,GACrE;IACF,qBACE,8OAAC,2NAAA,CAAA,QAAW,CAAC,IAAI;QAAC,KAAK;QAAM,GAAG,IAAI;;YACjC,uBACC,8OAAC,2NAAA,CAAA,QAAW,CAAC,KAAK;;oBACf;kCACD,8OAAC,2NAAA,CAAA,QAAW,CAAC,iBAAiB;wBAAC,UAAU;;;;;;;;;;;;YAG5C;YACA,4BACC,8OAAC,2NAAA,CAAA,QAAW,CAAC,UAAU;0BAAE;;;;;;YAE1B,2BACC,8OAAC,2NAAA,CAAA,QAAW,CAAC,SAAS;0BAAE;;;;;;;;;;;;AAIhC"}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":["file:///Users/satoukyouhei/Documents/it/tutorial/express_nextjs_tsoa_prisma/frontend/src/components/template/fieldInput/FieldInput.tsx"],"sourcesContent":["import { Input, InputProps } from \"@chakra-ui/react\";\nimport { FieldValues } from \"react-hook-form\";\nimport {\n  useFieldInput,\n  UseFieldInputProps,\n} from \"@/components/template/fieldInput/FieldInput.hooks\";\nimport { Field, FieldProps } from \"@/components/ui/field\";\n\ntype FieldInputProps<T extends FieldValues> = UseFieldInputProps<T> & {\n  fieldProps?: FieldProps;\n  inputProps?: InputProps;\n};\n\nexport const FieldInput = <T extends FieldValues>({\n  name,\n  control,\n  fieldProps,\n  inputProps,\n}: FieldInputProps<T>) => {\n  const { value, invalid, errors, onChange, onBlur } = useFieldInput({\n    name,\n    control,\n  });\n\n  const errorMessage = errors[name]?.message as string | undefined;\n  return (\n    <Field\n      errorText={errorMessage}\n      invalid={invalid}\n      label={name}\n      {...fieldProps}>\n      <Input\n        name={name}\n        onBlur={onBlur}\n        onChange={onChange}\n        value={value ?? \"\"}\n        {...inputProps}\n      />\n    </Field>\n  );\n};\n"],"names":[],"mappings":";;;;AAEA;AAIA;AANA;;;;;AAaO,MAAM,aAAa,CAAwB,EAChD,IAAI,EACJ,OAAO,EACP,UAAU,EACV,UAAU,EACS;IACnB,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,CAAA,GAAA,kKAAA,CAAA,gBAAa,AAAD,EAAE;QACjE;QACA;IACF;IAEA,MAAM,eAAe,MAAM,CAAC,KAAK,EAAE;IACnC,qBACE,8OAAC,iIAAA,CAAA,QAAK;QACJ,WAAW;QACX,SAAS;QACT,OAAO;QACN,GAAG,UAAU;kBACd,cAAA,8OAAC,sLAAA,CAAA,QAAK;YACJ,MAAM;YACN,QAAQ;YACR,UAAU;YACV,OAAO,SAAS;YACf,GAAG,UAAU;;;;;;;;;;;AAItB"}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 135, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 137, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 152, "column": 0}, "map": {"version":3,"sources":["file:///Users/satoukyouhei/Documents/it/tutorial/express_nextjs_tsoa_prisma/frontend/src/components/pages/home/Home.tsx"],"sourcesContent":["\"use client\";\n\nimport { useForm } from \"react-hook-form\";\nimport { z } from \"zod\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Button, Flex } from \"@chakra-ui/react\";\nimport { FieldInput } from \"@/components/template/fieldInput\";\n\nconst REQUIRED_MESSAGE = \"必須項目です\";\nconst NAME_MAX_LENGTH_MESSAGE = \"20文字以内で入力してください\";\nconst EMAIL_MESSAGE = \"メールアドレスの形式で入力してください\";\nconst PASSWORD_MIN_LENGTH_MESSAGE = \"パスワードは8文字以上で入力してください\";\n\nconst schema = z.object({\n  name: z\n    .string({\n      invalid_type_error: REQUIRED_MESSAGE,\n      required_error: REQUIRED_MESSAGE,\n    })\n    .max(20, NAME_MAX_LENGTH_MESSAGE),\n  email: z\n    .string({\n      invalid_type_error: REQUIRED_MESSAGE,\n      required_error: REQUIRED_MESSAGE,\n    })\n    .email(EMAIL_MESSAGE),\n  password: z\n    .string({\n      invalid_type_error: REQUIRED_MESSAGE,\n      required_error: REQUIRED_MESSAGE,\n    })\n    .min(8, PASSWORD_MIN_LENGTH_MESSAGE),\n});\n\ntype UseFormProps = {\n  name: string;\n  email: string;\n  password: string;\n};\n\nexport const Home = () => {\n  const { control, handleSubmit } = useForm<UseFormProps>({\n    mode: \"onTouched\",\n    resolver: zodResolver(schema),\n  });\n  const onSubmit = async (data: UseFormProps) => {\n    const users = new Users({ baseUrl: \"http://localhost:8080\" });\n\n  };\n\n  return (\n    <Flex direction=\"column\" gap=\"32px\" padding=\"16px\">\n      <FieldInput\n        control={control}\n        inputProps={{ width: \"400px\" }}\n        name=\"name\"\n      />\n      <FieldInput\n        control={control}\n        inputProps={{ width: \"400px\" }}\n        name=\"email\"\n      />\n      <FieldInput\n        control={control}\n        inputProps={{ width: \"400px\" }}\n        name=\"password\"\n      />\n      <Button onClick={handleSubmit(onSubmit)} width=\"200px\">\n        送信\n      </Button>\n    </Flex>\n  );\n};\n"],"names":[],"mappings":";;;;AAIA;AAEA;AAHA;AADA;AAGA;AACA;AADA;AALA;;;;;;;AAQA,MAAM,mBAAmB;AACzB,MAAM,0BAA0B;AAChC,MAAM,gBAAgB;AACtB,MAAM,8BAA8B;AAEpC,MAAM,SAAS,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtB,MAAM,oIAAA,CAAA,IAAC,CACJ,MAAM,CAAC;QACN,oBAAoB;QACpB,gBAAgB;IAClB,GACC,GAAG,CAAC,IAAI;IACX,OAAO,oIAAA,CAAA,IAAC,CACL,MAAM,CAAC;QACN,oBAAoB;QACpB,gBAAgB;IAClB,GACC,KAAK,CAAC;IACT,UAAU,oIAAA,CAAA,IAAC,CACR,MAAM,CAAC;QACN,oBAAoB;QACpB,gBAAgB;IAClB,GACC,GAAG,CAAC,GAAG;AACZ;AAQO,MAAM,OAAO;IAClB,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,GAAG,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAgB;QACtD,MAAM;QACN,UAAU,CAAA,GAAA,8JAAA,CAAA,cAAW,AAAD,EAAE;IACxB;IACA,MAAM,WAAW,OAAO;QACtB,MAAM,QAAQ,IAAI,MAAM;YAAE,SAAS;QAAwB;IAE7D;IAEA,qBACE,8OAAC,oLAAA,CAAA,OAAI;QAAC,WAAU;QAAS,KAAI;QAAO,SAAQ;;0BAC1C,8OAAC,0JAAA,CAAA,aAAU;gBACT,SAAS;gBACT,YAAY;oBAAE,OAAO;gBAAQ;gBAC7B,MAAK;;;;;;0BAEP,8OAAC,0JAAA,CAAA,aAAU;gBACT,SAAS;gBACT,YAAY;oBAAE,OAAO;gBAAQ;gBAC7B,MAAK;;;;;;0BAEP,8OAAC,0JAAA,CAAA,aAAU;gBACT,SAAS;gBACT,YAAY;oBAAE,OAAO;gBAAQ;gBAC7B,MAAK;;;;;;0BAEP,8OAAC,wLAAA,CAAA,SAAM;gBAAC,SAAS,aAAa;gBAAW,OAAM;0BAAQ;;;;;;;;;;;;AAK7D"}},
    {"offset": {"line": 252, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}